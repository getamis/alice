// Copyright Â© 2021 AMIS Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: github.com/getamis/alice/crypto/bip32/masterNewVersion/message.proto

package masternewversion

import (
	circuit "github.com/getamis/alice/crypto/circuit"
	ecpointgrouplaw "github.com/getamis/alice/crypto/ecpointgrouplaw"
	ot "github.com/getamis/alice/crypto/ot"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Round1Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NgarbledWireMKG []byte                `protobuf:"bytes,1,opt,name=NgarbledWireMKG,proto3" json:"NgarbledWireMKG,omitempty"`
	NgarbledWireaux []byte                `protobuf:"bytes,2,opt,name=NgarbledWireaux,proto3" json:"NgarbledWireaux,omitempty"`
	OtReceiverMsg   *ot.OtReceiverMessage `protobuf:"bytes,3,opt,name=otReceiverMsg,proto3" json:"otReceiverMsg,omitempty"`
}

func (x *Round1Message) Reset() {
	*x = Round1Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round1Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round1Message) ProtoMessage() {}

func (x *Round1Message) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round1Message.ProtoReflect.Descriptor instead.
func (*Round1Message) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_rawDescGZIP(), []int{0}
}

func (x *Round1Message) GetNgarbledWireMKG() []byte {
	if x != nil {
		return x.NgarbledWireMKG
	}
	return nil
}

func (x *Round1Message) GetNgarbledWireaux() []byte {
	if x != nil {
		return x.NgarbledWireaux
	}
	return nil
}

func (x *Round1Message) GetOtReceiverMsg() *ot.OtReceiverMessage {
	if x != nil {
		return x.OtReceiverMsg
	}
	return nil
}

type Round2Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtExtReceiveMsg *ot.OtExtReceiveMessage `protobuf:"bytes,1,opt,name=otExtReceiveMsg,proto3" json:"otExtReceiveMsg,omitempty"`
}

func (x *Round2Message) Reset() {
	*x = Round2Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round2Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round2Message) ProtoMessage() {}

func (x *Round2Message) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round2Message.ProtoReflect.Descriptor instead.
func (*Round2Message) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_rawDescGZIP(), []int{1}
}

func (x *Round2Message) GetOtExtReceiveMsg() *ot.OtExtReceiveMessage {
	if x != nil {
		return x.OtExtReceiveMsg
	}
	return nil
}

type Round3Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtExtSResponse *ot.OtExtSendResponseMessage `protobuf:"bytes,1,opt,name=otExtSResponse,proto3" json:"otExtSResponse,omitempty"`
}

func (x *Round3Message) Reset() {
	*x = Round3Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round3Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round3Message) ProtoMessage() {}

func (x *Round3Message) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round3Message.ProtoReflect.Descriptor instead.
func (*Round3Message) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_rawDescGZIP(), []int{2}
}

func (x *Round3Message) GetOtExtSResponse() *ot.OtExtSendResponseMessage {
	if x != nil {
		return x.OtExtSResponse
	}
	return nil
}

type Round4Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RG        *ecpointgrouplaw.EcPointMessage `protobuf:"bytes,1,opt,name=rG,proto3" json:"rG,omitempty"`
	GarcirMsg *circuit.GarbleCircuitMessage   `protobuf:"bytes,2,opt,name=garcirMsg,proto3" json:"garcirMsg,omitempty"`
}

func (x *Round4Message) Reset() {
	*x = Round4Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round4Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round4Message) ProtoMessage() {}

func (x *Round4Message) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round4Message.ProtoReflect.Descriptor instead.
func (*Round4Message) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_rawDescGZIP(), []int{3}
}

func (x *Round4Message) GetRG() *ecpointgrouplaw.EcPointMessage {
	if x != nil {
		return x.RG
	}
	return nil
}

func (x *Round4Message) GetGarcirMsg() *circuit.GarbleCircuitMessage {
	if x != nil {
		return x.GarcirMsg
	}
	return nil
}

type Round5Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GarcirMsg *circuit.GarbleCircuitMessage `protobuf:"bytes,1,opt,name=garcirMsg,proto3" json:"garcirMsg,omitempty"`
}

func (x *Round5Message) Reset() {
	*x = Round5Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round5Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round5Message) ProtoMessage() {}

func (x *Round5Message) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round5Message.ProtoReflect.Descriptor instead.
func (*Round5Message) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_rawDescGZIP(), []int{4}
}

func (x *Round5Message) GetGarcirMsg() *circuit.GarbleCircuitMessage {
	if x != nil {
		return x.GarcirMsg
	}
	return nil
}

var File_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto protoreflect.FileDescriptor

var file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_rawDesc = []byte{
	0x0a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74,
	0x61, 0x6d, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2f, 0x62, 0x69, 0x70, 0x33, 0x32, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65,
	0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x77, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x69,
	0x63, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x6f, 0x74, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2f, 0x61,
	0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x63, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65,
	0x74, 0x61, 0x6d, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2f, 0x65, 0x63, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6c,
	0x61, 0x77, 0x2f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa0,
	0x01, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x4e, 0x67, 0x61, 0x72, 0x62, 0x6c, 0x65, 0x64, 0x57, 0x69, 0x72, 0x65,
	0x4d, 0x4b, 0x47, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x4e, 0x67, 0x61, 0x72, 0x62,
	0x6c, 0x65, 0x64, 0x57, 0x69, 0x72, 0x65, 0x4d, 0x4b, 0x47, 0x12, 0x28, 0x0a, 0x0f, 0x4e, 0x67,
	0x61, 0x72, 0x62, 0x6c, 0x65, 0x64, 0x57, 0x69, 0x72, 0x65, 0x61, 0x75, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0f, 0x4e, 0x67, 0x61, 0x72, 0x62, 0x6c, 0x65, 0x64, 0x57, 0x69, 0x72,
	0x65, 0x61, 0x75, 0x78, 0x12, 0x3b, 0x0a, 0x0d, 0x6f, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x74,
	0x2e, 0x4f, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x0d, 0x6f, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x22, 0x52, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x6f, 0x74, 0x45, 0x78, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x74,
	0x2e, 0x4f, 0x74, 0x45, 0x78, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x6f, 0x74, 0x45, 0x78, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x4d, 0x73, 0x67, 0x22, 0x55, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x33, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x6f, 0x74, 0x45, 0x78, 0x74, 0x53,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6f, 0x74, 0x2e, 0x4f, 0x74, 0x45, 0x78, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x6f, 0x74,
	0x45, 0x78, 0x74, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d, 0x0a, 0x0d,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x34, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a,
	0x02, 0x72, 0x47, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x63, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6c, 0x61, 0x77, 0x2e, 0x45, 0x63, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x02, 0x72, 0x47, 0x12, 0x3b,
	0x0a, 0x09, 0x67, 0x61, 0x72, 0x63, 0x69, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x67, 0x61, 0x72, 0x62,
	0x6c, 0x65, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x09, 0x67, 0x61, 0x72, 0x63, 0x69, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x4c, 0x0a, 0x0d, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x35, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x09,
	0x67, 0x61, 0x72, 0x63, 0x69, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x6c, 0x65,
	0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x09,
	0x67, 0x61, 0x72, 0x63, 0x69, 0x72, 0x4d, 0x73, 0x67, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2f,
	0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x62, 0x69, 0x70,
	0x33, 0x32, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x77, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_rawDescOnce sync.Once
	file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_rawDescData = file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_rawDesc
)

func file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_rawDescGZIP() []byte {
	file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_rawDescOnce.Do(func() {
		file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_rawDescData)
	})
	return file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_rawDescData
}

var file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_goTypes = []interface{}{
	(*Round1Message)(nil),                  // 0: masternewversion.Round1Message
	(*Round2Message)(nil),                  // 1: masternewversion.Round2Message
	(*Round3Message)(nil),                  // 2: masternewversion.Round3Message
	(*Round4Message)(nil),                  // 3: masternewversion.Round4Message
	(*Round5Message)(nil),                  // 4: masternewversion.Round5Message
	(*ot.OtReceiverMessage)(nil),           // 5: ot.OtReceiverMessage
	(*ot.OtExtReceiveMessage)(nil),         // 6: ot.OtExtReceiveMessage
	(*ot.OtExtSendResponseMessage)(nil),    // 7: ot.OtExtSendResponseMessage
	(*ecpointgrouplaw.EcPointMessage)(nil), // 8: ecpointgrouplaw.EcPointMessage
	(*circuit.GarbleCircuitMessage)(nil),   // 9: circuit.garbleCircuitMessage
}
var file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_depIdxs = []int32{
	5, // 0: masternewversion.Round1Message.otReceiverMsg:type_name -> ot.OtReceiverMessage
	6, // 1: masternewversion.Round2Message.otExtReceiveMsg:type_name -> ot.OtExtReceiveMessage
	7, // 2: masternewversion.Round3Message.otExtSResponse:type_name -> ot.OtExtSendResponseMessage
	8, // 3: masternewversion.Round4Message.rG:type_name -> ecpointgrouplaw.EcPointMessage
	9, // 4: masternewversion.Round4Message.garcirMsg:type_name -> circuit.garbleCircuitMessage
	9, // 5: masternewversion.Round5Message.garcirMsg:type_name -> circuit.garbleCircuitMessage
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_init() }
func file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_init() {
	if File_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Round1Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Round2Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Round3Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Round4Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Round5Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_goTypes,
		DependencyIndexes: file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_depIdxs,
		MessageInfos:      file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_msgTypes,
	}.Build()
	File_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto = out.File
	file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_rawDesc = nil
	file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_goTypes = nil
	file_github_com_getamis_alice_crypto_bip32_masterNewVersion_message_proto_depIdxs = nil
}
