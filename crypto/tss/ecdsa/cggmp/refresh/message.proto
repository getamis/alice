// Copyright Â© 2022 AMIS Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package getamis.alice.crypto.tss.ecdsa.cggmp.refresh;

option go_package = "github.com/getamis/alice/crypto/tss/ecdsa/cggmp/refresh";

import "github.com/getamis/alice/crypto/ecpointgrouplaw/point.proto";
import "github.com/getamis/alice/crypto/commitment/message.proto";
import "github.com/getamis/alice/crypto/zkproof/message.proto";
import "github.com/getamis/alice/crypto/zkproof/paillier/message.proto";


enum Type {
    Round1 = 0;
    Round2 = 1;
    Round3 = 2;
}

message Message {
    Type type = 1;
    string id = 2;
    oneof body {
        Round1Msg round1 = 4;
        Round2Msg round2 = 5;
        Round3Msg round3 = 6;
    }
}

message HashMsg {
    commitment.PointCommitmentMessage pointCommitment = 1;
    ecpointgrouplaw.EcPointMessage Y = 2;
    getamis.alice.crypto.zkproof.paillier.RingPederssenParameterMessage pedPar = 3;
    bytes rho = 4; 
    bytes u = 5;
    bytes ssid = 6;
    bytes bk = 7;
    map<string, ecpointgrouplaw.EcPointMessage> A = 8;
    ecpointgrouplaw.EcPointMessage B = 9;
}

message Round1Msg {
    commitment.HashCommitmentMessage commitment = 1;
}

message Round2Msg {
    commitment.HashDecommitmentMessage decommitment = 1;
}

message Round3Msg {
    getamis.alice.crypto.zkproof.paillier.PaillierBlumMessage modProof = 1;
    getamis.alice.crypto.zkproof.paillier.NoSmallFactorMessage facProof = 2;
    zkproof.SchnorrProofMessage yschnorrProof = 3;
    bytes encshare = 4;
    zkproof.SchnorrProofMessage shareschnorrProof = 5;
}

message AuxiliaryInfoKeyRefeshErrorMessage {
    bytes ciphertext = 1;
    bytes plaintext = 2;
    bytes mu = 3;
}