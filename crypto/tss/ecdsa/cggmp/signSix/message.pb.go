// Copyright Â© 2022 AMIS Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: github.com/getamis/alice/crypto/tss/ecdsa/cggmp/signSix/message.proto

package signSix

import (
	ecpointgrouplaw "github.com/getamis/alice/crypto/ecpointgrouplaw"
	paillier "github.com/getamis/alice/crypto/zkproof/paillier"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Type int32

const (
	Type_Round1 Type = 0
	Type_Round2 Type = 1
	Type_Round3 Type = 2
	Type_Round4 Type = 3
	Type_Round5 Type = 4
	Type_Round6 Type = 5
	Type_Round7 Type = 6
	Type_Err1   Type = 7
	Type_Err2   Type = 8
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "Round1",
		1: "Round2",
		2: "Round3",
		3: "Round4",
		4: "Round5",
		5: "Round6",
		6: "Round7",
		7: "Err1",
		8: "Err2",
	}
	Type_value = map[string]int32{
		"Round1": 0,
		"Round2": 1,
		"Round3": 2,
		"Round4": 3,
		"Round5": 4,
		"Round6": 5,
		"Round7": 6,
		"Err1":   7,
		"Err2":   8,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_enumTypes[0].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_enumTypes[0]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_rawDescGZIP(), []int{0}
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Type   `protobuf:"varint,1,opt,name=type,proto3,enum=getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Type" json:"type,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Body:
	//	*Message_Round1
	//	*Message_Round2
	//	*Message_Round3
	//	*Message_Round4
	//	*Message_Round5
	//	*Message_Round6
	//	*Message_Round7
	//	*Message_Err1
	//	*Message_Err2
	Body isMessage_Body `protobuf_oneof:"body"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_Round1
}

func (x *Message) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *Message) GetBody() isMessage_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *Message) GetRound1() *Round1Msg {
	if x, ok := x.GetBody().(*Message_Round1); ok {
		return x.Round1
	}
	return nil
}

func (x *Message) GetRound2() *Round2Msg {
	if x, ok := x.GetBody().(*Message_Round2); ok {
		return x.Round2
	}
	return nil
}

func (x *Message) GetRound3() *Round3Msg {
	if x, ok := x.GetBody().(*Message_Round3); ok {
		return x.Round3
	}
	return nil
}

func (x *Message) GetRound4() *Round4Msg {
	if x, ok := x.GetBody().(*Message_Round4); ok {
		return x.Round4
	}
	return nil
}

func (x *Message) GetRound5() *Round5Msg {
	if x, ok := x.GetBody().(*Message_Round5); ok {
		return x.Round5
	}
	return nil
}

func (x *Message) GetRound6() *Round6Msg {
	if x, ok := x.GetBody().(*Message_Round6); ok {
		return x.Round6
	}
	return nil
}

func (x *Message) GetRound7() *Round7Msg {
	if x, ok := x.GetBody().(*Message_Round7); ok {
		return x.Round7
	}
	return nil
}

func (x *Message) GetErr1() *Err1Msg {
	if x, ok := x.GetBody().(*Message_Err1); ok {
		return x.Err1
	}
	return nil
}

func (x *Message) GetErr2() *Err2Msg {
	if x, ok := x.GetBody().(*Message_Err2); ok {
		return x.Err2
	}
	return nil
}

type isMessage_Body interface {
	isMessage_Body()
}

type Message_Round1 struct {
	Round1 *Round1Msg `protobuf:"bytes,4,opt,name=round1,proto3,oneof"`
}

type Message_Round2 struct {
	Round2 *Round2Msg `protobuf:"bytes,5,opt,name=round2,proto3,oneof"`
}

type Message_Round3 struct {
	Round3 *Round3Msg `protobuf:"bytes,6,opt,name=round3,proto3,oneof"`
}

type Message_Round4 struct {
	Round4 *Round4Msg `protobuf:"bytes,7,opt,name=round4,proto3,oneof"`
}

type Message_Round5 struct {
	Round5 *Round5Msg `protobuf:"bytes,8,opt,name=round5,proto3,oneof"`
}

type Message_Round6 struct {
	Round6 *Round6Msg `protobuf:"bytes,9,opt,name=round6,proto3,oneof"`
}

type Message_Round7 struct {
	Round7 *Round7Msg `protobuf:"bytes,10,opt,name=round7,proto3,oneof"`
}

type Message_Err1 struct {
	// Error message
	Err1 *Err1Msg `protobuf:"bytes,11,opt,name=err1,proto3,oneof"`
}

type Message_Err2 struct {
	Err2 *Err2Msg `protobuf:"bytes,12,opt,name=err2,proto3,oneof"`
}

func (*Message_Round1) isMessage_Body() {}

func (*Message_Round2) isMessage_Body() {}

func (*Message_Round3) isMessage_Body() {}

func (*Message_Round4) isMessage_Body() {}

func (*Message_Round5) isMessage_Body() {}

func (*Message_Round6) isMessage_Body() {}

func (*Message_Round7) isMessage_Body() {}

func (*Message_Err1) isMessage_Body() {}

func (*Message_Err2) isMessage_Body() {}

type Round1Msg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KCiphertext     []byte                          `protobuf:"bytes,1,opt,name=kCiphertext,proto3" json:"kCiphertext,omitempty"`
	GammaCiphertext []byte                          `protobuf:"bytes,2,opt,name=gammaCiphertext,proto3" json:"gammaCiphertext,omitempty"`
	Z1              *ecpointgrouplaw.EcPointMessage `protobuf:"bytes,3,opt,name=z1,proto3" json:"z1,omitempty"`
	Z2              *ecpointgrouplaw.EcPointMessage `protobuf:"bytes,4,opt,name=z2,proto3" json:"z2,omitempty"`
	Psi             *paillier.EncElgMessage         `protobuf:"bytes,5,opt,name=psi,proto3" json:"psi,omitempty"`
}

func (x *Round1Msg) Reset() {
	*x = Round1Msg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round1Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round1Msg) ProtoMessage() {}

func (x *Round1Msg) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round1Msg.ProtoReflect.Descriptor instead.
func (*Round1Msg) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_rawDescGZIP(), []int{1}
}

func (x *Round1Msg) GetKCiphertext() []byte {
	if x != nil {
		return x.KCiphertext
	}
	return nil
}

func (x *Round1Msg) GetGammaCiphertext() []byte {
	if x != nil {
		return x.GammaCiphertext
	}
	return nil
}

func (x *Round1Msg) GetZ1() *ecpointgrouplaw.EcPointMessage {
	if x != nil {
		return x.Z1
	}
	return nil
}

func (x *Round1Msg) GetZ2() *ecpointgrouplaw.EcPointMessage {
	if x != nil {
		return x.Z2
	}
	return nil
}

func (x *Round1Msg) GetPsi() *paillier.EncElgMessage {
	if x != nil {
		return x.Psi
	}
	return nil
}

type Round2Msg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	D      []byte                                          `protobuf:"bytes,1,opt,name=D,proto3" json:"D,omitempty"`
	F      []byte                                          `protobuf:"bytes,2,opt,name=F,proto3" json:"F,omitempty"`
	Dhat   []byte                                          `protobuf:"bytes,3,opt,name=Dhat,proto3" json:"Dhat,omitempty"`
	Fhat   []byte                                          `protobuf:"bytes,4,opt,name=Fhat,proto3" json:"Fhat,omitempty"`
	Psi    *paillier.PaillierOperationAndCommitmentMessage `protobuf:"bytes,5,opt,name=psi,proto3" json:"psi,omitempty"`
	Psihat *paillier.PaillierAffAndGroupRangeMessage       `protobuf:"bytes,6,opt,name=psihat,proto3" json:"psihat,omitempty"`
}

func (x *Round2Msg) Reset() {
	*x = Round2Msg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round2Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round2Msg) ProtoMessage() {}

func (x *Round2Msg) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round2Msg.ProtoReflect.Descriptor instead.
func (*Round2Msg) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_rawDescGZIP(), []int{2}
}

func (x *Round2Msg) GetD() []byte {
	if x != nil {
		return x.D
	}
	return nil
}

func (x *Round2Msg) GetF() []byte {
	if x != nil {
		return x.F
	}
	return nil
}

func (x *Round2Msg) GetDhat() []byte {
	if x != nil {
		return x.Dhat
	}
	return nil
}

func (x *Round2Msg) GetFhat() []byte {
	if x != nil {
		return x.Fhat
	}
	return nil
}

func (x *Round2Msg) GetPsi() *paillier.PaillierOperationAndCommitmentMessage {
	if x != nil {
		return x.Psi
	}
	return nil
}

func (x *Round2Msg) GetPsihat() *paillier.PaillierAffAndGroupRangeMessage {
	if x != nil {
		return x.Psihat
	}
	return nil
}

type Round3Msg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delta []byte                          `protobuf:"bytes,1,opt,name=delta,proto3" json:"delta,omitempty"`
	Z1Hat *ecpointgrouplaw.EcPointMessage `protobuf:"bytes,2,opt,name=z1hat,proto3" json:"z1hat,omitempty"`
	Z2Hat *ecpointgrouplaw.EcPointMessage `protobuf:"bytes,3,opt,name=z2hat,proto3" json:"z2hat,omitempty"`
}

func (x *Round3Msg) Reset() {
	*x = Round3Msg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round3Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round3Msg) ProtoMessage() {}

func (x *Round3Msg) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round3Msg.ProtoReflect.Descriptor instead.
func (*Round3Msg) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_rawDescGZIP(), []int{3}
}

func (x *Round3Msg) GetDelta() []byte {
	if x != nil {
		return x.Delta
	}
	return nil
}

func (x *Round3Msg) GetZ1Hat() *ecpointgrouplaw.EcPointMessage {
	if x != nil {
		return x.Z1Hat
	}
	return nil
}

func (x *Round3Msg) GetZ2Hat() *ecpointgrouplaw.EcPointMessage {
	if x != nil {
		return x.Z2Hat
	}
	return nil
}

type Round4Msg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gamma  *ecpointgrouplaw.EcPointMessage `protobuf:"bytes,1,opt,name=gamma,proto3" json:"gamma,omitempty"`
	Psipai *paillier.LogStarMessage        `protobuf:"bytes,2,opt,name=psipai,proto3" json:"psipai,omitempty"`
}

func (x *Round4Msg) Reset() {
	*x = Round4Msg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round4Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round4Msg) ProtoMessage() {}

func (x *Round4Msg) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round4Msg.ProtoReflect.Descriptor instead.
func (*Round4Msg) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_rawDescGZIP(), []int{4}
}

func (x *Round4Msg) GetGamma() *ecpointgrouplaw.EcPointMessage {
	if x != nil {
		return x.Gamma
	}
	return nil
}

func (x *Round4Msg) GetPsipai() *paillier.LogStarMessage {
	if x != nil {
		return x.Psipai
	}
	return nil
}

type Round5Msg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delta *ecpointgrouplaw.EcPointMessage `protobuf:"bytes,1,opt,name=delta,proto3" json:"delta,omitempty"`
	Psi   *paillier.ELogMessage           `protobuf:"bytes,2,opt,name=psi,proto3" json:"psi,omitempty"`
}

func (x *Round5Msg) Reset() {
	*x = Round5Msg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round5Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round5Msg) ProtoMessage() {}

func (x *Round5Msg) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round5Msg.ProtoReflect.Descriptor instead.
func (*Round5Msg) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_rawDescGZIP(), []int{5}
}

func (x *Round5Msg) GetDelta() *ecpointgrouplaw.EcPointMessage {
	if x != nil {
		return x.Delta
	}
	return nil
}

func (x *Round5Msg) GetPsi() *paillier.ELogMessage {
	if x != nil {
		return x.Psi
	}
	return nil
}

type Round6Msg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S  *ecpointgrouplaw.EcPointMessage `protobuf:"bytes,1,opt,name=s,proto3" json:"s,omitempty"`
	Pi *paillier.ELogMessage           `protobuf:"bytes,2,opt,name=pi,proto3" json:"pi,omitempty"`
}

func (x *Round6Msg) Reset() {
	*x = Round6Msg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round6Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round6Msg) ProtoMessage() {}

func (x *Round6Msg) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round6Msg.ProtoReflect.Descriptor instead.
func (*Round6Msg) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_rawDescGZIP(), []int{6}
}

func (x *Round6Msg) GetS() *ecpointgrouplaw.EcPointMessage {
	if x != nil {
		return x.S
	}
	return nil
}

func (x *Round6Msg) GetPi() *paillier.ELogMessage {
	if x != nil {
		return x.Pi
	}
	return nil
}

type Round7Msg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sigma []byte `protobuf:"bytes,1,opt,name=sigma,proto3" json:"sigma,omitempty"`
}

func (x *Round7Msg) Reset() {
	*x = Round7Msg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round7Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round7Msg) ProtoMessage() {}

func (x *Round7Msg) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round7Msg.ProtoReflect.Descriptor instead.
func (*Round7Msg) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_rawDescGZIP(), []int{7}
}

func (x *Round7Msg) GetSigma() []byte {
	if x != nil {
		return x.Sigma
	}
	return nil
}

type Err1Msg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	K           []byte                   `protobuf:"bytes,1,opt,name=k,proto3" json:"k,omitempty"`
	RhoNPower   []byte                   `protobuf:"bytes,2,opt,name=rhoNPower,proto3" json:"rhoNPower,omitempty"`
	PsiRhoProof *paillier.NthRootMessage `protobuf:"bytes,3,opt,name=psiRhoProof,proto3" json:"psiRhoProof,omitempty"`
	Gamma       []byte                   `protobuf:"bytes,4,opt,name=gamma,proto3" json:"gamma,omitempty"`
	// key => id
	Peers map[string]*Err1PeerMsg `protobuf:"bytes,6,rep,name=peers,proto3" json:"peers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Err1Msg) Reset() {
	*x = Err1Msg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Err1Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Err1Msg) ProtoMessage() {}

func (x *Err1Msg) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Err1Msg.ProtoReflect.Descriptor instead.
func (*Err1Msg) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_rawDescGZIP(), []int{8}
}

func (x *Err1Msg) GetK() []byte {
	if x != nil {
		return x.K
	}
	return nil
}

func (x *Err1Msg) GetRhoNPower() []byte {
	if x != nil {
		return x.RhoNPower
	}
	return nil
}

func (x *Err1Msg) GetPsiRhoProof() *paillier.NthRootMessage {
	if x != nil {
		return x.PsiRhoProof
	}
	return nil
}

func (x *Err1Msg) GetGamma() []byte {
	if x != nil {
		return x.Gamma
	}
	return nil
}

func (x *Err1Msg) GetPeers() map[string]*Err1PeerMsg {
	if x != nil {
		return x.Peers
	}
	return nil
}

type Err1PeerMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alpha      []byte                   `protobuf:"bytes,1,opt,name=alpha,proto3" json:"alpha,omitempty"`
	MuNPower   []byte                   `protobuf:"bytes,2,opt,name=muNPower,proto3" json:"muNPower,omitempty"`
	PsiMuProof *paillier.NthRootMessage `protobuf:"bytes,3,opt,name=psiMuProof,proto3" json:"psiMuProof,omitempty"`
}

func (x *Err1PeerMsg) Reset() {
	*x = Err1PeerMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Err1PeerMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Err1PeerMsg) ProtoMessage() {}

func (x *Err1PeerMsg) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Err1PeerMsg.ProtoReflect.Descriptor instead.
func (*Err1PeerMsg) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_rawDescGZIP(), []int{9}
}

func (x *Err1PeerMsg) GetAlpha() []byte {
	if x != nil {
		return x.Alpha
	}
	return nil
}

func (x *Err1PeerMsg) GetMuNPower() []byte {
	if x != nil {
		return x.MuNPower
	}
	return nil
}

func (x *Err1PeerMsg) GetPsiMuProof() *paillier.NthRootMessage {
	if x != nil {
		return x.PsiMuProof
	}
	return nil
}

type Err2Msg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	K           []byte                          `protobuf:"bytes,1,opt,name=k,proto3" json:"k,omitempty"`
	RhoNPower   []byte                          `protobuf:"bytes,2,opt,name=rhoNPower,proto3" json:"rhoNPower,omitempty"`
	PsiRhoProof *paillier.NthRootMessage        `protobuf:"bytes,3,opt,name=psiRhoProof,proto3" json:"psiRhoProof,omitempty"`
	Ytilde      *ecpointgrouplaw.EcPointMessage `protobuf:"bytes,4,opt,name=ytilde,proto3" json:"ytilde,omitempty"`
	PsipaiProof *paillier.LogMessage            `protobuf:"bytes,5,opt,name=psipaiProof,proto3" json:"psipaiProof,omitempty"`
	// key => id
	Peers map[string]*Err2PeerMsg `protobuf:"bytes,6,rep,name=peers,proto3" json:"peers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Err2Msg) Reset() {
	*x = Err2Msg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Err2Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Err2Msg) ProtoMessage() {}

func (x *Err2Msg) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Err2Msg.ProtoReflect.Descriptor instead.
func (*Err2Msg) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_rawDescGZIP(), []int{10}
}

func (x *Err2Msg) GetK() []byte {
	if x != nil {
		return x.K
	}
	return nil
}

func (x *Err2Msg) GetRhoNPower() []byte {
	if x != nil {
		return x.RhoNPower
	}
	return nil
}

func (x *Err2Msg) GetPsiRhoProof() *paillier.NthRootMessage {
	if x != nil {
		return x.PsiRhoProof
	}
	return nil
}

func (x *Err2Msg) GetYtilde() *ecpointgrouplaw.EcPointMessage {
	if x != nil {
		return x.Ytilde
	}
	return nil
}

func (x *Err2Msg) GetPsipaiProof() *paillier.LogMessage {
	if x != nil {
		return x.PsipaiProof
	}
	return nil
}

func (x *Err2Msg) GetPeers() map[string]*Err2PeerMsg {
	if x != nil {
		return x.Peers
	}
	return nil
}

type Err2PeerMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alphahat    []byte                   `protobuf:"bytes,1,opt,name=alphahat,proto3" json:"alphahat,omitempty"`
	MuhatNPower []byte                   `protobuf:"bytes,2,opt,name=muhatNPower,proto3" json:"muhatNPower,omitempty"`
	PsiMuProof  *paillier.NthRootMessage `protobuf:"bytes,3,opt,name=psiMuProof,proto3" json:"psiMuProof,omitempty"`
}

func (x *Err2PeerMsg) Reset() {
	*x = Err2PeerMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Err2PeerMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Err2PeerMsg) ProtoMessage() {}

func (x *Err2PeerMsg) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Err2PeerMsg.ProtoReflect.Descriptor instead.
func (*Err2PeerMsg) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_rawDescGZIP(), []int{11}
}

func (x *Err2PeerMsg) GetAlphahat() []byte {
	if x != nil {
		return x.Alphahat
	}
	return nil
}

func (x *Err2PeerMsg) GetMuhatNPower() []byte {
	if x != nil {
		return x.MuhatNPower
	}
	return nil
}

func (x *Err2PeerMsg) GetPsiMuProof() *paillier.NthRootMessage {
	if x != nil {
		return x.PsiMuProof
	}
	return nil
}

var File_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto protoreflect.FileDescriptor

var file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_rawDesc = []byte{
	0x0a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74,
	0x61, 0x6d, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2f, 0x74, 0x73, 0x73, 0x2f, 0x65, 0x63, 0x64, 0x73, 0x61, 0x2f, 0x63, 0x67, 0x67, 0x6d,
	0x70, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x69, 0x78, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2c, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73,
	0x2e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x74, 0x73,
	0x73, 0x2e, 0x65, 0x63, 0x64, 0x73, 0x61, 0x2e, 0x63, 0x67, 0x67, 0x6d, 0x70, 0x2e, 0x73, 0x69,
	0x67, 0x6e, 0x53, 0x69, 0x78, 0x1a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x65, 0x63, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x6c, 0x61, 0x77, 0x2f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2f, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2f, 0x70, 0x61, 0x69, 0x6c,
	0x6c, 0x69, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xc8, 0x06, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x46,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67,
	0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x74, 0x73, 0x73, 0x2e, 0x65, 0x63, 0x64, 0x73, 0x61, 0x2e, 0x63, 0x67,
	0x67, 0x6d, 0x70, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x69, 0x78, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x31,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73,
	0x2e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x74, 0x73,
	0x73, 0x2e, 0x65, 0x63, 0x64, 0x73, 0x61, 0x2e, 0x63, 0x67, 0x67, 0x6d, 0x70, 0x2e, 0x73, 0x69,
	0x67, 0x6e, 0x53, 0x69, 0x78, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x4d, 0x73, 0x67, 0x48,
	0x00, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x12, 0x51, 0x0a, 0x06, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x65, 0x74, 0x61,
	0x6d, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x74, 0x73, 0x73, 0x2e, 0x65, 0x63, 0x64, 0x73, 0x61, 0x2e, 0x63, 0x67, 0x67, 0x6d, 0x70,
	0x2e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x69, 0x78, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x4d,
	0x73, 0x67, 0x48, 0x00, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x12, 0x51, 0x0a, 0x06,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x33, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67,
	0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x74, 0x73, 0x73, 0x2e, 0x65, 0x63, 0x64, 0x73, 0x61, 0x2e, 0x63, 0x67,
	0x67, 0x6d, 0x70, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x69, 0x78, 0x2e, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x33, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x33, 0x12,
	0x51, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x74, 0x73, 0x73, 0x2e, 0x65, 0x63, 0x64, 0x73, 0x61,
	0x2e, 0x63, 0x67, 0x67, 0x6d, 0x70, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x69, 0x78, 0x2e, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x34, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x34, 0x12, 0x51, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x35, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x69,
	0x63, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x74, 0x73, 0x73, 0x2e, 0x65, 0x63,
	0x64, 0x73, 0x61, 0x2e, 0x63, 0x67, 0x67, 0x6d, 0x70, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x69,
	0x78, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x35, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x06, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x35, 0x12, 0x51, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x36, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2e,
	0x61, 0x6c, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x74, 0x73, 0x73,
	0x2e, 0x65, 0x63, 0x64, 0x73, 0x61, 0x2e, 0x63, 0x67, 0x67, 0x6d, 0x70, 0x2e, 0x73, 0x69, 0x67,
	0x6e, 0x53, 0x69, 0x78, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x36, 0x4d, 0x73, 0x67, 0x48, 0x00,
	0x52, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x36, 0x12, 0x51, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x37, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x65, 0x74, 0x61, 0x6d,
	0x69, 0x73, 0x2e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x74, 0x73, 0x73, 0x2e, 0x65, 0x63, 0x64, 0x73, 0x61, 0x2e, 0x63, 0x67, 0x67, 0x6d, 0x70, 0x2e,
	0x73, 0x69, 0x67, 0x6e, 0x53, 0x69, 0x78, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x37, 0x4d, 0x73,
	0x67, 0x48, 0x00, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x37, 0x12, 0x4b, 0x0a, 0x04, 0x65,
	0x72, 0x72, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x65, 0x74, 0x61,
	0x6d, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x74, 0x73, 0x73, 0x2e, 0x65, 0x63, 0x64, 0x73, 0x61, 0x2e, 0x63, 0x67, 0x67, 0x6d, 0x70,
	0x2e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x69, 0x78, 0x2e, 0x45, 0x72, 0x72, 0x31, 0x4d, 0x73, 0x67,
	0x48, 0x00, 0x52, 0x04, 0x65, 0x72, 0x72, 0x31, 0x12, 0x4b, 0x0a, 0x04, 0x65, 0x72, 0x72, 0x32,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73,
	0x2e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x74, 0x73,
	0x73, 0x2e, 0x65, 0x63, 0x64, 0x73, 0x61, 0x2e, 0x63, 0x67, 0x67, 0x6d, 0x70, 0x2e, 0x73, 0x69,
	0x67, 0x6e, 0x53, 0x69, 0x78, 0x2e, 0x45, 0x72, 0x72, 0x32, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52,
	0x04, 0x65, 0x72, 0x72, 0x32, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xab, 0x02,
	0x0a, 0x09, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x4d, 0x73, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x6b,
	0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x6b, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x43, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x12, 0x44, 0x0a, 0x02, 0x7a, 0x31, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2e, 0x61, 0x6c,
	0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x65, 0x63, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6c, 0x61, 0x77, 0x2e, 0x45, 0x63, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x02, 0x7a, 0x31, 0x12, 0x44, 0x0a,
	0x02, 0x7a, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x65, 0x74, 0x61,
	0x6d, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x65, 0x63, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6c, 0x61, 0x77,
	0x2e, 0x45, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x02, 0x7a, 0x32, 0x12, 0x46, 0x0a, 0x03, 0x70, 0x73, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x69, 0x63, 0x65,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e,
	0x70, 0x61, 0x69, 0x6c, 0x6c, 0x69, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x63, 0x45, 0x6c, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x70, 0x73, 0x69, 0x22, 0x8f, 0x02, 0x0a, 0x09,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x4d, 0x73, 0x67, 0x12, 0x0c, 0x0a, 0x01, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x44, 0x12, 0x0c, 0x0a, 0x01, 0x46, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x01, 0x46, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x68, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x68, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x68, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x46, 0x68, 0x61, 0x74, 0x12, 0x5e, 0x0a,
	0x03, 0x70, 0x73, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x67, 0x65, 0x74,
	0x61, 0x6d, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x70, 0x61, 0x69, 0x6c, 0x6c, 0x69,
	0x65, 0x72, 0x2e, 0x50, 0x61, 0x69, 0x6c, 0x6c, 0x69, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x70, 0x73, 0x69, 0x12, 0x5e, 0x0a,
	0x06, 0x70, 0x73, 0x69, 0x68, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e,
	0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x70, 0x61, 0x69,
	0x6c, 0x6c, 0x69, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x69, 0x6c, 0x6c, 0x69, 0x65, 0x72, 0x41, 0x66,
	0x66, 0x41, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x70, 0x73, 0x69, 0x68, 0x61, 0x74, 0x22, 0xb9, 0x01,
	0x0a, 0x09, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x33, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x12, 0x4a, 0x0a, 0x05, 0x7a, 0x31, 0x68, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x69, 0x63, 0x65,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x65, 0x63, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x6c, 0x61, 0x77, 0x2e, 0x45, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x7a, 0x31, 0x68, 0x61, 0x74, 0x12, 0x4a, 0x0a,
	0x05, 0x7a, 0x32, 0x68, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67,
	0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x65, 0x63, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x6c, 0x61, 0x77, 0x2e, 0x45, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x05, 0x7a, 0x32, 0x68, 0x61, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x09, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x34, 0x4d, 0x73, 0x67, 0x12, 0x4a, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x6d, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73,
	0x2e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x65, 0x63,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6c, 0x61, 0x77, 0x2e, 0x45, 0x63,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x67, 0x61,
	0x6d, 0x6d, 0x61, 0x12, 0x4d, 0x0a, 0x06, 0x70, 0x73, 0x69, 0x70, 0x61, 0x69, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2e, 0x61, 0x6c,
	0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x2e, 0x70, 0x61, 0x69, 0x6c, 0x6c, 0x69, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x53,
	0x74, 0x61, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x70, 0x73, 0x69, 0x70,
	0x61, 0x69, 0x22, 0x9d, 0x01, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x35, 0x4d, 0x73, 0x67,
	0x12, 0x4a, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x65, 0x63, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x6c, 0x61, 0x77, 0x2e, 0x45, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x03,
	0x70, 0x73, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x65, 0x74, 0x61,
	0x6d, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x70, 0x61, 0x69, 0x6c, 0x6c, 0x69, 0x65,
	0x72, 0x2e, 0x45, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x70,
	0x73, 0x69, 0x22, 0x93, 0x01, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x36, 0x4d, 0x73, 0x67,
	0x12, 0x42, 0x0a, 0x01, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x65,
	0x74, 0x61, 0x6d, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x65, 0x63, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6c,
	0x61, 0x77, 0x2e, 0x45, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x01, 0x73, 0x12, 0x42, 0x0a, 0x02, 0x70, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x69, 0x63, 0x65,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e,
	0x70, 0x61, 0x69, 0x6c, 0x6c, 0x69, 0x65, 0x72, 0x2e, 0x45, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x02, 0x70, 0x69, 0x22, 0x21, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x37, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x22, 0xf1, 0x02, 0x0a, 0x07,
	0x45, 0x72, 0x72, 0x31, 0x4d, 0x73, 0x67, 0x12, 0x0c, 0x0a, 0x01, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x01, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x68, 0x6f, 0x4e, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x68, 0x6f, 0x4e, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x0b, 0x70, 0x73, 0x69, 0x52, 0x68, 0x6f, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x65, 0x74, 0x61, 0x6d,
	0x69, 0x73, 0x2e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x70, 0x61, 0x69, 0x6c, 0x6c, 0x69, 0x65, 0x72,
	0x2e, 0x4e, 0x74, 0x68, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x0b, 0x70, 0x73, 0x69, 0x52, 0x68, 0x6f, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x14, 0x0a, 0x05,
	0x67, 0x61, 0x6d, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x67, 0x61, 0x6d,
	0x6d, 0x61, 0x12, 0x56, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x69, 0x63,
	0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x74, 0x73, 0x73, 0x2e, 0x65, 0x63, 0x64,
	0x73, 0x61, 0x2e, 0x63, 0x67, 0x67, 0x6d, 0x70, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x69, 0x78,
	0x2e, 0x45, 0x72, 0x72, 0x31, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x1a, 0x73, 0x0a, 0x0a, 0x50, 0x65,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x65, 0x74, 0x61,
	0x6d, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x74, 0x73, 0x73, 0x2e, 0x65, 0x63, 0x64, 0x73, 0x61, 0x2e, 0x63, 0x67, 0x67, 0x6d, 0x70,
	0x2e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x69, 0x78, 0x2e, 0x45, 0x72, 0x72, 0x31, 0x50, 0x65, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x96, 0x01, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x31, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x75, 0x4e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x75, 0x4e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x12, 0x55, 0x0a, 0x0a, 0x70, 0x73, 0x69, 0x4d, 0x75, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2e,
	0x61, 0x6c, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x7a, 0x6b, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x70, 0x61, 0x69, 0x6c, 0x6c, 0x69, 0x65, 0x72, 0x2e, 0x4e, 0x74,
	0x68, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x70, 0x73,
	0x69, 0x4d, 0x75, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0xfe, 0x03, 0x0a, 0x07, 0x45, 0x72, 0x72,
	0x32, 0x4d, 0x73, 0x67, 0x12, 0x0c, 0x0a, 0x01, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x01, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x68, 0x6f, 0x4e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x68, 0x6f, 0x4e, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x57, 0x0a, 0x0b, 0x70, 0x73, 0x69, 0x52, 0x68, 0x6f, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2e,
	0x61, 0x6c, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x7a, 0x6b, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x70, 0x61, 0x69, 0x6c, 0x6c, 0x69, 0x65, 0x72, 0x2e, 0x4e, 0x74,
	0x68, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x70, 0x73,
	0x69, 0x52, 0x68, 0x6f, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x4c, 0x0a, 0x06, 0x79, 0x74, 0x69,
	0x6c, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x65, 0x74, 0x61,
	0x6d, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x65, 0x63, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6c, 0x61, 0x77,
	0x2e, 0x45, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x06, 0x79, 0x74, 0x69, 0x6c, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x0b, 0x70, 0x73, 0x69, 0x70, 0x61,
	0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67,
	0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x70, 0x61, 0x69, 0x6c,
	0x6c, 0x69, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x0b, 0x70, 0x73, 0x69, 0x70, 0x61, 0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x56, 0x0a, 0x05,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x65,
	0x74, 0x61, 0x6d, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x74, 0x73, 0x73, 0x2e, 0x65, 0x63, 0x64, 0x73, 0x61, 0x2e, 0x63, 0x67, 0x67,
	0x6d, 0x70, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x69, 0x78, 0x2e, 0x45, 0x72, 0x72, 0x32, 0x4d,
	0x73, 0x67, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x1a, 0x73, 0x0a, 0x0a, 0x50, 0x65, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2e, 0x61, 0x6c,
	0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x74, 0x73, 0x73, 0x2e, 0x65,
	0x63, 0x64, 0x73, 0x61, 0x2e, 0x63, 0x67, 0x67, 0x6d, 0x70, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x53,
	0x69, 0x78, 0x2e, 0x45, 0x72, 0x72, 0x32, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2, 0x01, 0x0a, 0x0b, 0x45, 0x72,
	0x72, 0x32, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x68, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x68, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x75, 0x68, 0x61, 0x74, 0x4e, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6d, 0x75, 0x68, 0x61,
	0x74, 0x4e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x0a, 0x70, 0x73, 0x69, 0x4d, 0x75,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x65,
	0x74, 0x61, 0x6d, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x70, 0x61, 0x69, 0x6c, 0x6c,
	0x69, 0x65, 0x72, 0x2e, 0x4e, 0x74, 0x68, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x0a, 0x70, 0x73, 0x69, 0x4d, 0x75, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x2a, 0x6e,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x33, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x34, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x35,
	0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x36, 0x10, 0x05, 0x12, 0x0a,
	0x0a, 0x06, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x37, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x72,
	0x72, 0x31, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x72, 0x72, 0x32, 0x10, 0x08, 0x42, 0x39,
	0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74,
	0x61, 0x6d, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2f, 0x74, 0x73, 0x73, 0x2f, 0x65, 0x63, 0x64, 0x73, 0x61, 0x2f, 0x63, 0x67, 0x67, 0x6d,
	0x70, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x69, 0x78, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_rawDescOnce sync.Once
	file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_rawDescData = file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_rawDesc
)

func file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_rawDescGZIP() []byte {
	file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_rawDescOnce.Do(func() {
		file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_rawDescData)
	})
	return file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_rawDescData
}

var file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_goTypes = []interface{}{
	(Type)(0),                              // 0: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Type
	(*Message)(nil),                        // 1: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Message
	(*Round1Msg)(nil),                      // 2: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Round1Msg
	(*Round2Msg)(nil),                      // 3: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Round2Msg
	(*Round3Msg)(nil),                      // 4: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Round3Msg
	(*Round4Msg)(nil),                      // 5: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Round4Msg
	(*Round5Msg)(nil),                      // 6: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Round5Msg
	(*Round6Msg)(nil),                      // 7: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Round6Msg
	(*Round7Msg)(nil),                      // 8: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Round7Msg
	(*Err1Msg)(nil),                        // 9: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Err1Msg
	(*Err1PeerMsg)(nil),                    // 10: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Err1PeerMsg
	(*Err2Msg)(nil),                        // 11: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Err2Msg
	(*Err2PeerMsg)(nil),                    // 12: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Err2PeerMsg
	nil,                                    // 13: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Err1Msg.PeersEntry
	nil,                                    // 14: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Err2Msg.PeersEntry
	(*ecpointgrouplaw.EcPointMessage)(nil), // 15: getamis.alice.crypto.ecpointgrouplaw.EcPointMessage
	(*paillier.EncElgMessage)(nil),         // 16: getamis.alice.crypto.zkproof.paillier.EncElgMessage
	(*paillier.PaillierOperationAndCommitmentMessage)(nil), // 17: getamis.alice.crypto.zkproof.paillier.PaillierOperationAndCommitmentMessage
	(*paillier.PaillierAffAndGroupRangeMessage)(nil),       // 18: getamis.alice.crypto.zkproof.paillier.PaillierAffAndGroupRangeMessage
	(*paillier.LogStarMessage)(nil),                        // 19: getamis.alice.crypto.zkproof.paillier.LogStarMessage
	(*paillier.ELogMessage)(nil),                           // 20: getamis.alice.crypto.zkproof.paillier.ELogMessage
	(*paillier.NthRootMessage)(nil),                        // 21: getamis.alice.crypto.zkproof.paillier.NthRootMessage
	(*paillier.LogMessage)(nil),                            // 22: getamis.alice.crypto.zkproof.paillier.LogMessage
}
var file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_depIdxs = []int32{
	0,  // 0: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Message.type:type_name -> getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Type
	2,  // 1: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Message.round1:type_name -> getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Round1Msg
	3,  // 2: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Message.round2:type_name -> getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Round2Msg
	4,  // 3: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Message.round3:type_name -> getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Round3Msg
	5,  // 4: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Message.round4:type_name -> getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Round4Msg
	6,  // 5: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Message.round5:type_name -> getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Round5Msg
	7,  // 6: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Message.round6:type_name -> getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Round6Msg
	8,  // 7: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Message.round7:type_name -> getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Round7Msg
	9,  // 8: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Message.err1:type_name -> getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Err1Msg
	11, // 9: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Message.err2:type_name -> getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Err2Msg
	15, // 10: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Round1Msg.z1:type_name -> getamis.alice.crypto.ecpointgrouplaw.EcPointMessage
	15, // 11: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Round1Msg.z2:type_name -> getamis.alice.crypto.ecpointgrouplaw.EcPointMessage
	16, // 12: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Round1Msg.psi:type_name -> getamis.alice.crypto.zkproof.paillier.EncElgMessage
	17, // 13: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Round2Msg.psi:type_name -> getamis.alice.crypto.zkproof.paillier.PaillierOperationAndCommitmentMessage
	18, // 14: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Round2Msg.psihat:type_name -> getamis.alice.crypto.zkproof.paillier.PaillierAffAndGroupRangeMessage
	15, // 15: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Round3Msg.z1hat:type_name -> getamis.alice.crypto.ecpointgrouplaw.EcPointMessage
	15, // 16: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Round3Msg.z2hat:type_name -> getamis.alice.crypto.ecpointgrouplaw.EcPointMessage
	15, // 17: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Round4Msg.gamma:type_name -> getamis.alice.crypto.ecpointgrouplaw.EcPointMessage
	19, // 18: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Round4Msg.psipai:type_name -> getamis.alice.crypto.zkproof.paillier.LogStarMessage
	15, // 19: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Round5Msg.delta:type_name -> getamis.alice.crypto.ecpointgrouplaw.EcPointMessage
	20, // 20: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Round5Msg.psi:type_name -> getamis.alice.crypto.zkproof.paillier.ELogMessage
	15, // 21: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Round6Msg.s:type_name -> getamis.alice.crypto.ecpointgrouplaw.EcPointMessage
	20, // 22: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Round6Msg.pi:type_name -> getamis.alice.crypto.zkproof.paillier.ELogMessage
	21, // 23: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Err1Msg.psiRhoProof:type_name -> getamis.alice.crypto.zkproof.paillier.NthRootMessage
	13, // 24: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Err1Msg.peers:type_name -> getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Err1Msg.PeersEntry
	21, // 25: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Err1PeerMsg.psiMuProof:type_name -> getamis.alice.crypto.zkproof.paillier.NthRootMessage
	21, // 26: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Err2Msg.psiRhoProof:type_name -> getamis.alice.crypto.zkproof.paillier.NthRootMessage
	15, // 27: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Err2Msg.ytilde:type_name -> getamis.alice.crypto.ecpointgrouplaw.EcPointMessage
	22, // 28: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Err2Msg.psipaiProof:type_name -> getamis.alice.crypto.zkproof.paillier.LogMessage
	14, // 29: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Err2Msg.peers:type_name -> getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Err2Msg.PeersEntry
	21, // 30: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Err2PeerMsg.psiMuProof:type_name -> getamis.alice.crypto.zkproof.paillier.NthRootMessage
	10, // 31: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Err1Msg.PeersEntry.value:type_name -> getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Err1PeerMsg
	12, // 32: getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Err2Msg.PeersEntry.value:type_name -> getamis.alice.crypto.tss.ecdsa.cggmp.signSix.Err2PeerMsg
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_init() }
func file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_init() {
	if File_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Round1Msg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Round2Msg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Round3Msg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Round4Msg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Round5Msg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Round6Msg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Round7Msg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Err1Msg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Err1PeerMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Err2Msg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Err2PeerMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Message_Round1)(nil),
		(*Message_Round2)(nil),
		(*Message_Round3)(nil),
		(*Message_Round4)(nil),
		(*Message_Round5)(nil),
		(*Message_Round6)(nil),
		(*Message_Round7)(nil),
		(*Message_Err1)(nil),
		(*Message_Err2)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_goTypes,
		DependencyIndexes: file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_depIdxs,
		EnumInfos:         file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_enumTypes,
		MessageInfos:      file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_msgTypes,
	}.Build()
	File_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto = out.File
	file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_rawDesc = nil
	file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_goTypes = nil
	file_github_com_getamis_alice_crypto_tss_ecdsa_cggmp_signSix_message_proto_depIdxs = nil
}
