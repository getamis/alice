// Copyright Â© 2022 AMIS Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package getamis.alice.crypto.tss.ecdsa.cggmp.sign;

option go_package = "github.com/getamis/alice/crypto/tss/ecdsa/cggmp/sign";

import "github.com/getamis/alice/crypto/ecpointgrouplaw/point.proto";
import "github.com/getamis/alice/crypto/zkproof/paillier/message.proto";

enum Type {
    Round1 = 0;
    Round2 = 1;
    Round3 = 2;
    Round4 = 3;

    Err1 = 4;
    Err2 = 5;
}

message Message {
    Type type = 1;
    string id = 2;
    oneof body {
        Round1Msg round1 = 4;
        Round2Msg round2 = 5;
        Round3Msg round3 = 6;
        Round4Msg round4 = 7;

        // Error message
        Err1Msg err1 = 8;
        Err2Msg err2 = 9;        
    }
}

message Round1Msg {
    bytes kCiphertext = 1;
    bytes gammaCiphertext = 2;
    getamis.alice.crypto.zkproof.paillier.EncryptRangeMessage psi = 3; 
}

message Round2Msg {
    bytes D = 1;
    bytes F = 2;
    bytes Dhat = 3;
    bytes Fhat = 4;
    getamis.alice.crypto.zkproof.paillier.PaillierAffAndGroupRangeMessage psi = 5;
    getamis.alice.crypto.zkproof.paillier.PaillierAffAndGroupRangeMessage psihat = 6;
    getamis.alice.crypto.zkproof.paillier.LogStarMessage psipai = 7;
    ecpointgrouplaw.EcPointMessage Gamma = 8;
}

message Round3Msg {
    string delta = 1;
    ecpointgrouplaw.EcPointMessage bigDelta = 2;
    getamis.alice.crypto.zkproof.paillier.LogStarMessage psidoublepai = 3;
}

message Round4Msg {
    bytes sigmai = 1;
}

message Err1Msg {
    bytes kgammaCiphertext = 1;
    getamis.alice.crypto.zkproof.paillier.MulMessage mulProof = 2;
    bytes productrCiphertext = 3;
    // key => id
    map<string, Err1PeerMsg> peers = 4;

}

message Err1PeerMsg {
    getamis.alice.crypto.zkproof.paillier.DecryMessage decryProoof = 1;
    bytes count = 2;
}

message Err2Msg {
    bytes kMulBkShareCiphertext = 1;
    bytes productrCiphertext = 2;
    // key => id
    map<string, Err2PeerMsg> peers = 3;
}

message Err2PeerMsg {
    getamis.alice.crypto.zkproof.paillier.MulStarMessage mulStarProof = 1;
    getamis.alice.crypto.zkproof.paillier.DecryMessage decryProoof = 2;
    bytes count = 3;
}