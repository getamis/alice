// Copyright Â© 2020 AMIS Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: github.com/aisuosuo/alice/crypto/tss/signer/message.proto

package signer

import (
	commitment "github.com/aisuosuo/alice/crypto/commitment"
	zkproof "github.com/aisuosuo/alice/crypto/zkproof"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Type int32

const (
	Type_Pubkey       Type = 0
	Type_EncK         Type = 1
	Type_Mta          Type = 2
	Type_Delta        Type = 3
	Type_ProofAi      Type = 4
	Type_CommitViAi   Type = 5
	Type_DecommitViAi Type = 6
	Type_CommitUiTi   Type = 7
	Type_DecommitUiTi Type = 8
	Type_Si           Type = 9
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "Pubkey",
		1: "EncK",
		2: "Mta",
		3: "Delta",
		4: "ProofAi",
		5: "CommitViAi",
		6: "DecommitViAi",
		7: "CommitUiTi",
		8: "DecommitUiTi",
		9: "Si",
	}
	Type_value = map[string]int32{
		"Pubkey":       0,
		"EncK":         1,
		"Mta":          2,
		"Delta":        3,
		"ProofAi":      4,
		"CommitViAi":   5,
		"DecommitViAi": 6,
		"CommitUiTi":   7,
		"DecommitUiTi": 8,
		"Si":           9,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_getamis_alice_crypto_tss_signer_message_proto_enumTypes[0].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_github_com_getamis_alice_crypto_tss_signer_message_proto_enumTypes[0]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_signer_message_proto_rawDescGZIP(), []int{0}
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Type   `protobuf:"varint,1,opt,name=type,proto3,enum=signer.Type" json:"type,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Body:
	//	*Message_Pubkey
	//	*Message_EncK
	//	*Message_Mta
	//	*Message_Delta
	//	*Message_ProofAi
	//	*Message_CommitViAi
	//	*Message_DecommitViAi
	//	*Message_CommitUiTi
	//	*Message_DecommitUiTi
	//	*Message_Si
	Body isMessage_Body `protobuf_oneof:"body"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_signer_message_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_Pubkey
}

func (x *Message) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *Message) GetBody() isMessage_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *Message) GetPubkey() *BodyPublicKey {
	if x, ok := x.GetBody().(*Message_Pubkey); ok {
		return x.Pubkey
	}
	return nil
}

func (x *Message) GetEncK() *BodyEncK {
	if x, ok := x.GetBody().(*Message_EncK); ok {
		return x.EncK
	}
	return nil
}

func (x *Message) GetMta() *BodyMta {
	if x, ok := x.GetBody().(*Message_Mta); ok {
		return x.Mta
	}
	return nil
}

func (x *Message) GetDelta() *BodyDelta {
	if x, ok := x.GetBody().(*Message_Delta); ok {
		return x.Delta
	}
	return nil
}

func (x *Message) GetProofAi() *BodyProofAi {
	if x, ok := x.GetBody().(*Message_ProofAi); ok {
		return x.ProofAi
	}
	return nil
}

func (x *Message) GetCommitViAi() *BodyCommitViAi {
	if x, ok := x.GetBody().(*Message_CommitViAi); ok {
		return x.CommitViAi
	}
	return nil
}

func (x *Message) GetDecommitViAi() *BodyDecommitViAi {
	if x, ok := x.GetBody().(*Message_DecommitViAi); ok {
		return x.DecommitViAi
	}
	return nil
}

func (x *Message) GetCommitUiTi() *BodyCommitUiTi {
	if x, ok := x.GetBody().(*Message_CommitUiTi); ok {
		return x.CommitUiTi
	}
	return nil
}

func (x *Message) GetDecommitUiTi() *BodyDecommitUiTi {
	if x, ok := x.GetBody().(*Message_DecommitUiTi); ok {
		return x.DecommitUiTi
	}
	return nil
}

func (x *Message) GetSi() *BodySi {
	if x, ok := x.GetBody().(*Message_Si); ok {
		return x.Si
	}
	return nil
}

type isMessage_Body interface {
	isMessage_Body()
}

type Message_Pubkey struct {
	Pubkey *BodyPublicKey `protobuf:"bytes,3,opt,name=pubkey,proto3,oneof"`
}

type Message_EncK struct {
	EncK *BodyEncK `protobuf:"bytes,4,opt,name=encK,proto3,oneof"`
}

type Message_Mta struct {
	Mta *BodyMta `protobuf:"bytes,5,opt,name=mta,proto3,oneof"`
}

type Message_Delta struct {
	Delta *BodyDelta `protobuf:"bytes,6,opt,name=delta,proto3,oneof"`
}

type Message_ProofAi struct {
	ProofAi *BodyProofAi `protobuf:"bytes,7,opt,name=proofAi,proto3,oneof"`
}

type Message_CommitViAi struct {
	CommitViAi *BodyCommitViAi `protobuf:"bytes,8,opt,name=commitViAi,proto3,oneof"`
}

type Message_DecommitViAi struct {
	DecommitViAi *BodyDecommitViAi `protobuf:"bytes,9,opt,name=decommitViAi,proto3,oneof"`
}

type Message_CommitUiTi struct {
	CommitUiTi *BodyCommitUiTi `protobuf:"bytes,10,opt,name=commitUiTi,proto3,oneof"`
}

type Message_DecommitUiTi struct {
	DecommitUiTi *BodyDecommitUiTi `protobuf:"bytes,11,opt,name=decommitUiTi,proto3,oneof"`
}

type Message_Si struct {
	Si *BodySi `protobuf:"bytes,12,opt,name=si,proto3,oneof"`
}

func (*Message_Pubkey) isMessage_Body() {}

func (*Message_EncK) isMessage_Body() {}

func (*Message_Mta) isMessage_Body() {}

func (*Message_Delta) isMessage_Body() {}

func (*Message_ProofAi) isMessage_Body() {}

func (*Message_CommitViAi) isMessage_Body() {}

func (*Message_DecommitViAi) isMessage_Body() {}

func (*Message_CommitUiTi) isMessage_Body() {}

func (*Message_DecommitUiTi) isMessage_Body() {}

func (*Message_Si) isMessage_Body() {}

type BodyPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkey       []byte                            `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	AgCommitment *commitment.HashCommitmentMessage `protobuf:"bytes,3,opt,name=agCommitment,proto3" json:"agCommitment,omitempty"`
}

func (x *BodyPublicKey) Reset() {
	*x = BodyPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyPublicKey) ProtoMessage() {}

func (x *BodyPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyPublicKey.ProtoReflect.Descriptor instead.
func (*BodyPublicKey) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_signer_message_proto_rawDescGZIP(), []int{1}
}

func (x *BodyPublicKey) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *BodyPublicKey) GetAgCommitment() *commitment.HashCommitmentMessage {
	if x != nil {
		return x.AgCommitment
	}
	return nil
}

type BodyEncK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enck []byte `protobuf:"bytes,2,opt,name=enck,proto3" json:"enck,omitempty"`
}

func (x *BodyEncK) Reset() {
	*x = BodyEncK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyEncK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyEncK) ProtoMessage() {}

func (x *BodyEncK) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyEncK.ProtoReflect.Descriptor instead.
func (*BodyEncK) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_signer_message_proto_rawDescGZIP(), []int{2}
}

func (x *BodyEncK) GetEnck() []byte {
	if x != nil {
		return x.Enck
	}
	return nil
}

type BodyMta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncAiAlpha []byte `protobuf:"bytes,1,opt,name=encAiAlpha,proto3" json:"encAiAlpha,omitempty"`
	EncWiAlpha []byte `protobuf:"bytes,2,opt,name=encWiAlpha,proto3" json:"encWiAlpha,omitempty"`
	WiProof    []byte `protobuf:"bytes,3,opt,name=wiProof,proto3" json:"wiProof,omitempty"`
}

func (x *BodyMta) Reset() {
	*x = BodyMta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyMta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyMta) ProtoMessage() {}

func (x *BodyMta) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyMta.ProtoReflect.Descriptor instead.
func (*BodyMta) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_signer_message_proto_rawDescGZIP(), []int{3}
}

func (x *BodyMta) GetEncAiAlpha() []byte {
	if x != nil {
		return x.EncAiAlpha
	}
	return nil
}

func (x *BodyMta) GetEncWiAlpha() []byte {
	if x != nil {
		return x.EncWiAlpha
	}
	return nil
}

func (x *BodyMta) GetWiProof() []byte {
	if x != nil {
		return x.WiProof
	}
	return nil
}

type BodyDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delta []byte `protobuf:"bytes,1,opt,name=delta,proto3" json:"delta,omitempty"`
}

func (x *BodyDelta) Reset() {
	*x = BodyDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyDelta) ProtoMessage() {}

func (x *BodyDelta) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyDelta.ProtoReflect.Descriptor instead.
func (*BodyDelta) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_signer_message_proto_rawDescGZIP(), []int{4}
}

func (x *BodyDelta) GetDelta() []byte {
	if x != nil {
		return x.Delta
	}
	return nil
}

type BodyProofAi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgDecommitment *commitment.HashDecommitmentMessage `protobuf:"bytes,1,opt,name=agDecommitment,proto3" json:"agDecommitment,omitempty"`
	AiProof        *zkproof.SchnorrProofMessage        `protobuf:"bytes,2,opt,name=aiProof,proto3" json:"aiProof,omitempty"`
}

func (x *BodyProofAi) Reset() {
	*x = BodyProofAi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyProofAi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyProofAi) ProtoMessage() {}

func (x *BodyProofAi) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyProofAi.ProtoReflect.Descriptor instead.
func (*BodyProofAi) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_signer_message_proto_rawDescGZIP(), []int{5}
}

func (x *BodyProofAi) GetAgDecommitment() *commitment.HashDecommitmentMessage {
	if x != nil {
		return x.AgDecommitment
	}
	return nil
}

func (x *BodyProofAi) GetAiProof() *zkproof.SchnorrProofMessage {
	if x != nil {
		return x.AiProof
	}
	return nil
}

type BodyCommitViAi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViCommitment *commitment.HashCommitmentMessage `protobuf:"bytes,1,opt,name=viCommitment,proto3" json:"viCommitment,omitempty"`
	AiCommitment *commitment.HashCommitmentMessage `protobuf:"bytes,2,opt,name=aiCommitment,proto3" json:"aiCommitment,omitempty"`
}

func (x *BodyCommitViAi) Reset() {
	*x = BodyCommitViAi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyCommitViAi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyCommitViAi) ProtoMessage() {}

func (x *BodyCommitViAi) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyCommitViAi.ProtoReflect.Descriptor instead.
func (*BodyCommitViAi) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_signer_message_proto_rawDescGZIP(), []int{6}
}

func (x *BodyCommitViAi) GetViCommitment() *commitment.HashCommitmentMessage {
	if x != nil {
		return x.ViCommitment
	}
	return nil
}

func (x *BodyCommitViAi) GetAiCommitment() *commitment.HashCommitmentMessage {
	if x != nil {
		return x.AiCommitment
	}
	return nil
}

type BodyDecommitViAi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViDecommitment *commitment.HashDecommitmentMessage `protobuf:"bytes,1,opt,name=viDecommitment,proto3" json:"viDecommitment,omitempty"`
	AiDecommitment *commitment.HashDecommitmentMessage `protobuf:"bytes,2,opt,name=aiDecommitment,proto3" json:"aiDecommitment,omitempty"`
	RhoIProof      *zkproof.SchnorrProofMessage        `protobuf:"bytes,3,opt,name=rhoIProof,proto3" json:"rhoIProof,omitempty"`
	LiProof        *zkproof.SchnorrProofMessage        `protobuf:"bytes,4,opt,name=liProof,proto3" json:"liProof,omitempty"`
}

func (x *BodyDecommitViAi) Reset() {
	*x = BodyDecommitViAi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyDecommitViAi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyDecommitViAi) ProtoMessage() {}

func (x *BodyDecommitViAi) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyDecommitViAi.ProtoReflect.Descriptor instead.
func (*BodyDecommitViAi) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_signer_message_proto_rawDescGZIP(), []int{7}
}

func (x *BodyDecommitViAi) GetViDecommitment() *commitment.HashDecommitmentMessage {
	if x != nil {
		return x.ViDecommitment
	}
	return nil
}

func (x *BodyDecommitViAi) GetAiDecommitment() *commitment.HashDecommitmentMessage {
	if x != nil {
		return x.AiDecommitment
	}
	return nil
}

func (x *BodyDecommitViAi) GetRhoIProof() *zkproof.SchnorrProofMessage {
	if x != nil {
		return x.RhoIProof
	}
	return nil
}

func (x *BodyDecommitViAi) GetLiProof() *zkproof.SchnorrProofMessage {
	if x != nil {
		return x.LiProof
	}
	return nil
}

type BodyCommitUiTi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UiCommitment *commitment.HashCommitmentMessage `protobuf:"bytes,1,opt,name=uiCommitment,proto3" json:"uiCommitment,omitempty"`
	TiCommitment *commitment.HashCommitmentMessage `protobuf:"bytes,2,opt,name=tiCommitment,proto3" json:"tiCommitment,omitempty"`
}

func (x *BodyCommitUiTi) Reset() {
	*x = BodyCommitUiTi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyCommitUiTi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyCommitUiTi) ProtoMessage() {}

func (x *BodyCommitUiTi) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyCommitUiTi.ProtoReflect.Descriptor instead.
func (*BodyCommitUiTi) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_signer_message_proto_rawDescGZIP(), []int{8}
}

func (x *BodyCommitUiTi) GetUiCommitment() *commitment.HashCommitmentMessage {
	if x != nil {
		return x.UiCommitment
	}
	return nil
}

func (x *BodyCommitUiTi) GetTiCommitment() *commitment.HashCommitmentMessage {
	if x != nil {
		return x.TiCommitment
	}
	return nil
}

type BodyDecommitUiTi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UiDecommitment *commitment.HashDecommitmentMessage `protobuf:"bytes,1,opt,name=uiDecommitment,proto3" json:"uiDecommitment,omitempty"`
	TiDecommitment *commitment.HashDecommitmentMessage `protobuf:"bytes,2,opt,name=tiDecommitment,proto3" json:"tiDecommitment,omitempty"`
}

func (x *BodyDecommitUiTi) Reset() {
	*x = BodyDecommitUiTi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyDecommitUiTi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyDecommitUiTi) ProtoMessage() {}

func (x *BodyDecommitUiTi) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyDecommitUiTi.ProtoReflect.Descriptor instead.
func (*BodyDecommitUiTi) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_signer_message_proto_rawDescGZIP(), []int{9}
}

func (x *BodyDecommitUiTi) GetUiDecommitment() *commitment.HashDecommitmentMessage {
	if x != nil {
		return x.UiDecommitment
	}
	return nil
}

func (x *BodyDecommitUiTi) GetTiDecommitment() *commitment.HashDecommitmentMessage {
	if x != nil {
		return x.TiDecommitment
	}
	return nil
}

type BodySi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Si []byte `protobuf:"bytes,1,opt,name=si,proto3" json:"si,omitempty"`
}

func (x *BodySi) Reset() {
	*x = BodySi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodySi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodySi) ProtoMessage() {}

func (x *BodySi) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodySi.ProtoReflect.Descriptor instead.
func (*BodySi) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_signer_message_proto_rawDescGZIP(), []int{10}
}

func (x *BodySi) GetSi() []byte {
	if x != nil {
		return x.Si
	}
	return nil
}

var File_github_com_getamis_alice_crypto_tss_signer_message_proto protoreflect.FileDescriptor

var file_github_com_getamis_alice_crypto_tss_signer_message_proto_rawDesc = []byte{
	0x0a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74,
	0x61, 0x6d, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2f, 0x74, 0x73, 0x73, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x1a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73,
	0x2f, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x7a, 0x6b,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xb3, 0x04, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x20, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x12, 0x26, 0x0a, 0x04, 0x65, 0x6e, 0x63, 0x4b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x45, 0x6e,
	0x63, 0x4b, 0x48, 0x00, 0x52, 0x04, 0x65, 0x6e, 0x63, 0x4b, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x64, 0x79, 0x4d, 0x74, 0x61, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x74, 0x61, 0x12,
	0x29, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x41, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x41, 0x69,
	0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x41, 0x69, 0x12, 0x38, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x56, 0x69, 0x41, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x56, 0x69, 0x41, 0x69, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x56, 0x69, 0x41, 0x69, 0x12, 0x3e, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x56, 0x69, 0x41, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x56, 0x69, 0x41, 0x69, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x56, 0x69, 0x41, 0x69, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x55,
	0x69, 0x54, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x55, 0x69, 0x54,
	0x69, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x55, 0x69, 0x54, 0x69, 0x12,
	0x3e, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x55, 0x69, 0x54, 0x69, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x64, 0x79, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x55, 0x69, 0x54, 0x69, 0x48,
	0x00, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x55, 0x69, 0x54, 0x69, 0x12,
	0x20, 0x0a, 0x02, 0x73, 0x69, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x48, 0x00, 0x52, 0x02, 0x73,
	0x69, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x6e, 0x0a, 0x0d, 0x42, 0x6f, 0x64,
	0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x12, 0x45, 0x0a, 0x0c, 0x61, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x61, 0x67, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x1e, 0x0a, 0x08, 0x42, 0x6f, 0x64,
	0x79, 0x45, 0x6e, 0x63, 0x4b, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x6e, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x65, 0x6e, 0x63, 0x6b, 0x22, 0x63, 0x0a, 0x07, 0x42, 0x6f, 0x64,
	0x79, 0x4d, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x41, 0x69, 0x41, 0x6c, 0x70,
	0x68, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x41, 0x69, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x57, 0x69, 0x41, 0x6c, 0x70,
	0x68, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x57, 0x69, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x77, 0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x21,
	0x0a, 0x09, 0x42, 0x6f, 0x64, 0x79, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x22, 0x92, 0x01, 0x0a, 0x0b, 0x42, 0x6f, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x41,
	0x69, 0x12, 0x4b, 0x0a, 0x0e, 0x61, 0x67, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x44, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e,
	0x61, 0x67, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36,
	0x0a, 0x07, 0x61, 0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x53, 0x63, 0x68, 0x6e, 0x6f, 0x72,
	0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x61,
	0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x9e, 0x01, 0x0a, 0x0e, 0x42, 0x6f, 0x64, 0x79, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x56, 0x69, 0x41, 0x69, 0x12, 0x45, 0x0a, 0x0c, 0x76, 0x69, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x73,
	0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x0c, 0x76, 0x69, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x45, 0x0a, 0x0c, 0x61, 0x69, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x61, 0x69, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa0, 0x02, 0x0a, 0x10, 0x42, 0x6f, 0x64, 0x79,
	0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x56, 0x69, 0x41, 0x69, 0x12, 0x4b, 0x0a, 0x0e,
	0x76, 0x69, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x76, 0x69, 0x44, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0e, 0x61, 0x69, 0x44,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x48,
	0x61, 0x73, 0x68, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x61, 0x69, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x72, 0x68, 0x6f, 0x49, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x6b, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x2e, 0x53, 0x63, 0x68, 0x6e, 0x6f, 0x72, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x09, 0x72, 0x68, 0x6f, 0x49, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x12, 0x36, 0x0a, 0x07, 0x6c, 0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x53, 0x63,
	0x68, 0x6e, 0x6f, 0x72, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6c, 0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x9e, 0x01, 0x0a, 0x0e, 0x42,
	0x6f, 0x64, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x55, 0x69, 0x54, 0x69, 0x12, 0x45, 0x0a,
	0x0c, 0x75, 0x69, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x75, 0x69, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0c, 0x74, 0x69, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x74,
	0x69, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x10,
	0x42, 0x6f, 0x64, 0x79, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x55, 0x69, 0x54, 0x69,
	0x12, 0x4b, 0x0a, 0x0e, 0x75, 0x69, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x75,
	0x69, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a,
	0x0e, 0x74, 0x69, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x74, 0x69, 0x44, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x18, 0x0a, 0x06, 0x42, 0x6f,
	0x64, 0x79, 0x53, 0x69, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x02, 0x73, 0x69, 0x2a, 0x89, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x6e, 0x63,
	0x4b, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x74, 0x61, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x41, 0x69, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x56, 0x69,
	0x41, 0x69, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x56, 0x69, 0x41, 0x69, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x55, 0x69, 0x54, 0x69, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x55, 0x69, 0x54, 0x69, 0x10, 0x08, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x69, 0x10, 0x09,
	0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2f, 0x74, 0x73, 0x73, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_getamis_alice_crypto_tss_signer_message_proto_rawDescOnce sync.Once
	file_github_com_getamis_alice_crypto_tss_signer_message_proto_rawDescData = file_github_com_getamis_alice_crypto_tss_signer_message_proto_rawDesc
)

func file_github_com_getamis_alice_crypto_tss_signer_message_proto_rawDescGZIP() []byte {
	file_github_com_getamis_alice_crypto_tss_signer_message_proto_rawDescOnce.Do(func() {
		file_github_com_getamis_alice_crypto_tss_signer_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_getamis_alice_crypto_tss_signer_message_proto_rawDescData)
	})
	return file_github_com_getamis_alice_crypto_tss_signer_message_proto_rawDescData
}

var file_github_com_getamis_alice_crypto_tss_signer_message_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_github_com_getamis_alice_crypto_tss_signer_message_proto_goTypes = []interface{}{
	(Type)(0),                                  // 0: signer.Type
	(*Message)(nil),                            // 1: signer.Message
	(*BodyPublicKey)(nil),                      // 2: signer.BodyPublicKey
	(*BodyEncK)(nil),                           // 3: signer.BodyEncK
	(*BodyMta)(nil),                            // 4: signer.BodyMta
	(*BodyDelta)(nil),                          // 5: signer.BodyDelta
	(*BodyProofAi)(nil),                        // 6: signer.BodyProofAi
	(*BodyCommitViAi)(nil),                     // 7: signer.BodyCommitViAi
	(*BodyDecommitViAi)(nil),                   // 8: signer.BodyDecommitViAi
	(*BodyCommitUiTi)(nil),                     // 9: signer.BodyCommitUiTi
	(*BodyDecommitUiTi)(nil),                   // 10: signer.BodyDecommitUiTi
	(*BodySi)(nil),                             // 11: signer.BodySi
	(*commitment.HashCommitmentMessage)(nil),   // 12: commitment.HashCommitmentMessage
	(*commitment.HashDecommitmentMessage)(nil), // 13: commitment.HashDecommitmentMessage
	(*zkproof.SchnorrProofMessage)(nil),        // 14: zkproof.SchnorrProofMessage
}
var file_github_com_getamis_alice_crypto_tss_signer_message_proto_depIdxs = []int32{
	0,  // 0: signer.Message.type:type_name -> signer.Type
	2,  // 1: signer.Message.pubkey:type_name -> signer.BodyPublicKey
	3,  // 2: signer.Message.encK:type_name -> signer.BodyEncK
	4,  // 3: signer.Message.mta:type_name -> signer.BodyMta
	5,  // 4: signer.Message.delta:type_name -> signer.BodyDelta
	6,  // 5: signer.Message.proofAi:type_name -> signer.BodyProofAi
	7,  // 6: signer.Message.commitViAi:type_name -> signer.BodyCommitViAi
	8,  // 7: signer.Message.decommitViAi:type_name -> signer.BodyDecommitViAi
	9,  // 8: signer.Message.commitUiTi:type_name -> signer.BodyCommitUiTi
	10, // 9: signer.Message.decommitUiTi:type_name -> signer.BodyDecommitUiTi
	11, // 10: signer.Message.si:type_name -> signer.BodySi
	12, // 11: signer.BodyPublicKey.agCommitment:type_name -> commitment.HashCommitmentMessage
	13, // 12: signer.BodyProofAi.agDecommitment:type_name -> commitment.HashDecommitmentMessage
	14, // 13: signer.BodyProofAi.aiProof:type_name -> zkproof.SchnorrProofMessage
	12, // 14: signer.BodyCommitViAi.viCommitment:type_name -> commitment.HashCommitmentMessage
	12, // 15: signer.BodyCommitViAi.aiCommitment:type_name -> commitment.HashCommitmentMessage
	13, // 16: signer.BodyDecommitViAi.viDecommitment:type_name -> commitment.HashDecommitmentMessage
	13, // 17: signer.BodyDecommitViAi.aiDecommitment:type_name -> commitment.HashDecommitmentMessage
	14, // 18: signer.BodyDecommitViAi.rhoIProof:type_name -> zkproof.SchnorrProofMessage
	14, // 19: signer.BodyDecommitViAi.liProof:type_name -> zkproof.SchnorrProofMessage
	12, // 20: signer.BodyCommitUiTi.uiCommitment:type_name -> commitment.HashCommitmentMessage
	12, // 21: signer.BodyCommitUiTi.tiCommitment:type_name -> commitment.HashCommitmentMessage
	13, // 22: signer.BodyDecommitUiTi.uiDecommitment:type_name -> commitment.HashDecommitmentMessage
	13, // 23: signer.BodyDecommitUiTi.tiDecommitment:type_name -> commitment.HashDecommitmentMessage
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_github_com_getamis_alice_crypto_tss_signer_message_proto_init() }
func file_github_com_getamis_alice_crypto_tss_signer_message_proto_init() {
	if File_github_com_getamis_alice_crypto_tss_signer_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyEncK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyMta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyProofAi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyCommitViAi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyDecommitViAi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyCommitUiTi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyDecommitUiTi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodySi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Message_Pubkey)(nil),
		(*Message_EncK)(nil),
		(*Message_Mta)(nil),
		(*Message_Delta)(nil),
		(*Message_ProofAi)(nil),
		(*Message_CommitViAi)(nil),
		(*Message_DecommitViAi)(nil),
		(*Message_CommitUiTi)(nil),
		(*Message_DecommitUiTi)(nil),
		(*Message_Si)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_getamis_alice_crypto_tss_signer_message_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_getamis_alice_crypto_tss_signer_message_proto_goTypes,
		DependencyIndexes: file_github_com_getamis_alice_crypto_tss_signer_message_proto_depIdxs,
		EnumInfos:         file_github_com_getamis_alice_crypto_tss_signer_message_proto_enumTypes,
		MessageInfos:      file_github_com_getamis_alice_crypto_tss_signer_message_proto_msgTypes,
	}.Build()
	File_github_com_getamis_alice_crypto_tss_signer_message_proto = out.File
	file_github_com_getamis_alice_crypto_tss_signer_message_proto_rawDesc = nil
	file_github_com_getamis_alice_crypto_tss_signer_message_proto_goTypes = nil
	file_github_com_getamis_alice_crypto_tss_signer_message_proto_depIdxs = nil
}
