// Copyright Â© 2020 AMIS Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: github.com/getamis/alice/crypto/tss/reshare/message.proto

package reshare

import (
	commitment "github.com/getamis/alice/crypto/commitment"
	zkproof "github.com/getamis/alice/crypto/zkproof"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Type int32

const (
	Type_Commit Type = 0
	Type_Verify Type = 1
	Type_Result Type = 2
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "Commit",
		1: "Verify",
		2: "Result",
	}
	Type_value = map[string]int32{
		"Commit": 0,
		"Verify": 1,
		"Result": 2,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_getamis_alice_crypto_tss_reshare_message_proto_enumTypes[0].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_github_com_getamis_alice_crypto_tss_reshare_message_proto_enumTypes[0]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_reshare_message_proto_rawDescGZIP(), []int{0}
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Type   `protobuf:"varint,1,opt,name=type,proto3,enum=reshare.Type" json:"type,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Body:
	//	*Message_Commit
	//	*Message_Verify
	//	*Message_Result
	Body isMessage_Body `protobuf_oneof:"body"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_reshare_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_reshare_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_reshare_message_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_Commit
}

func (x *Message) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *Message) GetBody() isMessage_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *Message) GetCommit() *BodyCommit {
	if x, ok := x.GetBody().(*Message_Commit); ok {
		return x.Commit
	}
	return nil
}

func (x *Message) GetVerify() *BodyVerify {
	if x, ok := x.GetBody().(*Message_Verify); ok {
		return x.Verify
	}
	return nil
}

func (x *Message) GetResult() *BodyResult {
	if x, ok := x.GetBody().(*Message_Result); ok {
		return x.Result
	}
	return nil
}

type isMessage_Body interface {
	isMessage_Body()
}

type Message_Commit struct {
	Commit *BodyCommit `protobuf:"bytes,3,opt,name=commit,proto3,oneof"`
}

type Message_Verify struct {
	Verify *BodyVerify `protobuf:"bytes,4,opt,name=verify,proto3,oneof"`
}

type Message_Result struct {
	Result *BodyResult `protobuf:"bytes,5,opt,name=result,proto3,oneof"`
}

func (*Message_Commit) isMessage_Body() {}

func (*Message_Verify) isMessage_Body() {}

func (*Message_Result) isMessage_Body() {}

type BodyCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointCommitment *commitment.PointCommitmentMessage `protobuf:"bytes,1,opt,name=pointCommitment,proto3" json:"pointCommitment,omitempty"`
}

func (x *BodyCommit) Reset() {
	*x = BodyCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_reshare_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyCommit) ProtoMessage() {}

func (x *BodyCommit) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_reshare_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyCommit.ProtoReflect.Descriptor instead.
func (*BodyCommit) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_reshare_message_proto_rawDescGZIP(), []int{1}
}

func (x *BodyCommit) GetPointCommitment() *commitment.PointCommitmentMessage {
	if x != nil {
		return x.PointCommitment
	}
	return nil
}

type BodyVerify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verify *commitment.FeldmanVerifyMessage `protobuf:"bytes,1,opt,name=verify,proto3" json:"verify,omitempty"`
}

func (x *BodyVerify) Reset() {
	*x = BodyVerify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_reshare_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyVerify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyVerify) ProtoMessage() {}

func (x *BodyVerify) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_reshare_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyVerify.ProtoReflect.Descriptor instead.
func (*BodyVerify) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_reshare_message_proto_rawDescGZIP(), []int{2}
}

func (x *BodyVerify) GetVerify() *commitment.FeldmanVerifyMessage {
	if x != nil {
		return x.Verify
	}
	return nil
}

type BodyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiGProofMsg *zkproof.SchnorrProofMessage `protobuf:"bytes,1,opt,name=siGProofMsg,proto3" json:"siGProofMsg,omitempty"`
}

func (x *BodyResult) Reset() {
	*x = BodyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_reshare_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyResult) ProtoMessage() {}

func (x *BodyResult) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_reshare_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyResult.ProtoReflect.Descriptor instead.
func (*BodyResult) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_reshare_message_proto_rawDescGZIP(), []int{3}
}

func (x *BodyResult) GetSiGProofMsg() *zkproof.SchnorrProofMessage {
	if x != nil {
		return x.SiGProofMsg
	}
	return nil
}

var File_github_com_getamis_alice_crypto_tss_reshare_message_proto protoreflect.FileDescriptor

var file_github_com_getamis_alice_crypto_tss_reshare_message_proto_rawDesc = []byte{
	0x0a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74,
	0x61, 0x6d, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2f, 0x74, 0x73, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72, 0x65, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x1a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x6d,
	0x69, 0x73, 0x2f, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f,
	0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd1, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x72, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x42,
	0x6f, 0x64, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x42, 0x6f,
	0x64, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x48, 0x00, 0x52, 0x06, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x64,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x5a, 0x0a, 0x0a, 0x42, 0x6f, 0x64,
	0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x46, 0x0a, 0x0a, 0x42, 0x6f, 0x64, 0x79, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x12, 0x38, 0x0a, 0x06, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x46, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x22, 0x4c, 0x0a,
	0x0a, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x73,
	0x69, 0x47, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x53, 0x63, 0x68, 0x6e, 0x6f,
	0x72, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b,
	0x73, 0x69, 0x47, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x73, 0x67, 0x2a, 0x2a, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x10, 0x02, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2f, 0x61, 0x6c,
	0x69, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x74, 0x73, 0x73, 0x2f, 0x72,
	0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_getamis_alice_crypto_tss_reshare_message_proto_rawDescOnce sync.Once
	file_github_com_getamis_alice_crypto_tss_reshare_message_proto_rawDescData = file_github_com_getamis_alice_crypto_tss_reshare_message_proto_rawDesc
)

func file_github_com_getamis_alice_crypto_tss_reshare_message_proto_rawDescGZIP() []byte {
	file_github_com_getamis_alice_crypto_tss_reshare_message_proto_rawDescOnce.Do(func() {
		file_github_com_getamis_alice_crypto_tss_reshare_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_getamis_alice_crypto_tss_reshare_message_proto_rawDescData)
	})
	return file_github_com_getamis_alice_crypto_tss_reshare_message_proto_rawDescData
}

var file_github_com_getamis_alice_crypto_tss_reshare_message_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_github_com_getamis_alice_crypto_tss_reshare_message_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_github_com_getamis_alice_crypto_tss_reshare_message_proto_goTypes = []interface{}{
	(Type)(0),          // 0: reshare.Type
	(*Message)(nil),    // 1: reshare.Message
	(*BodyCommit)(nil), // 2: reshare.BodyCommit
	(*BodyVerify)(nil), // 3: reshare.BodyVerify
	(*BodyResult)(nil), // 4: reshare.BodyResult
	(*commitment.PointCommitmentMessage)(nil), // 5: commitment.PointCommitmentMessage
	(*commitment.FeldmanVerifyMessage)(nil),   // 6: commitment.FeldmanVerifyMessage
	(*zkproof.SchnorrProofMessage)(nil),       // 7: zkproof.SchnorrProofMessage
}
var file_github_com_getamis_alice_crypto_tss_reshare_message_proto_depIdxs = []int32{
	0, // 0: reshare.Message.type:type_name -> reshare.Type
	2, // 1: reshare.Message.commit:type_name -> reshare.BodyCommit
	3, // 2: reshare.Message.verify:type_name -> reshare.BodyVerify
	4, // 3: reshare.Message.result:type_name -> reshare.BodyResult
	5, // 4: reshare.BodyCommit.pointCommitment:type_name -> commitment.PointCommitmentMessage
	6, // 5: reshare.BodyVerify.verify:type_name -> commitment.FeldmanVerifyMessage
	7, // 6: reshare.BodyResult.siGProofMsg:type_name -> zkproof.SchnorrProofMessage
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_github_com_getamis_alice_crypto_tss_reshare_message_proto_init() }
func file_github_com_getamis_alice_crypto_tss_reshare_message_proto_init() {
	if File_github_com_getamis_alice_crypto_tss_reshare_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_getamis_alice_crypto_tss_reshare_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_tss_reshare_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_tss_reshare_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyVerify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_tss_reshare_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_getamis_alice_crypto_tss_reshare_message_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Message_Commit)(nil),
		(*Message_Verify)(nil),
		(*Message_Result)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_getamis_alice_crypto_tss_reshare_message_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_getamis_alice_crypto_tss_reshare_message_proto_goTypes,
		DependencyIndexes: file_github_com_getamis_alice_crypto_tss_reshare_message_proto_depIdxs,
		EnumInfos:         file_github_com_getamis_alice_crypto_tss_reshare_message_proto_enumTypes,
		MessageInfos:      file_github_com_getamis_alice_crypto_tss_reshare_message_proto_msgTypes,
	}.Build()
	File_github_com_getamis_alice_crypto_tss_reshare_message_proto = out.File
	file_github_com_getamis_alice_crypto_tss_reshare_message_proto_rawDesc = nil
	file_github_com_getamis_alice_crypto_tss_reshare_message_proto_goTypes = nil
	file_github_com_getamis_alice_crypto_tss_reshare_message_proto_depIdxs = nil
}
