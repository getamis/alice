// Copyright Â© 2020 AMIS Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.12
// source: github.com/getamis/alice/crypto/commitment/message.proto

package commitment

import (
	ecpointgrouplaw "github.com/getamis/alice/crypto/ecpointgrouplaw"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// HashCommitmentMessage and HashDecommitmentMessage are for HashCommitment
// HashCommitmentMessage contains the blake2b initial vector and data digest for commitment use
type HashCommitmentMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Digest []byte `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *HashCommitmentMessage) Reset() {
	*x = HashCommitmentMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_commitment_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashCommitmentMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashCommitmentMessage) ProtoMessage() {}

func (x *HashCommitmentMessage) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_commitment_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashCommitmentMessage.ProtoReflect.Descriptor instead.
func (*HashCommitmentMessage) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_commitment_message_proto_rawDescGZIP(), []int{0}
}

func (x *HashCommitmentMessage) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

// HashDecommitmentMessage contains original data and salt for decommitment use
type HashDecommitmentMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Salt []byte `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
}

func (x *HashDecommitmentMessage) Reset() {
	*x = HashDecommitmentMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_commitment_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashDecommitmentMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashDecommitmentMessage) ProtoMessage() {}

func (x *HashDecommitmentMessage) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_commitment_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashDecommitmentMessage.ProtoReflect.Descriptor instead.
func (*HashDecommitmentMessage) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_commitment_message_proto_rawDescGZIP(), []int{1}
}

func (x *HashDecommitmentMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *HashDecommitmentMessage) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

// PointCommitmentMessage and PointDecommitmentMessage are for PointDecommitment
// PointCommitmentMessage contains rank and its points for commitment use
type PointCommitmentMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points []*ecpointgrouplaw.EcPointMessage `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *PointCommitmentMessage) Reset() {
	*x = PointCommitmentMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_commitment_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointCommitmentMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointCommitmentMessage) ProtoMessage() {}

func (x *PointCommitmentMessage) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_commitment_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointCommitmentMessage.ProtoReflect.Descriptor instead.
func (*PointCommitmentMessage) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_commitment_message_proto_rawDescGZIP(), []int{2}
}

func (x *PointCommitmentMessage) GetPoints() []*ecpointgrouplaw.EcPointMessage {
	if x != nil {
		return x.Points
	}
	return nil
}

// FeldmanVerifyMessage contains evaluation for verification use
type FeldmanVerifyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Evaluation []byte `protobuf:"bytes,1,opt,name=evaluation,proto3" json:"evaluation,omitempty"`
}

func (x *FeldmanVerifyMessage) Reset() {
	*x = FeldmanVerifyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_commitment_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeldmanVerifyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeldmanVerifyMessage) ProtoMessage() {}

func (x *FeldmanVerifyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_commitment_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeldmanVerifyMessage.ProtoReflect.Descriptor instead.
func (*FeldmanVerifyMessage) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_commitment_message_proto_rawDescGZIP(), []int{3}
}

func (x *FeldmanVerifyMessage) GetEvaluation() []byte {
	if x != nil {
		return x.Evaluation
	}
	return nil
}

// PedersenVerifyMessage contains evaluation and salt for verification use
type PedersenVerifyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Evaluation []byte `protobuf:"bytes,1,opt,name=evaluation,proto3" json:"evaluation,omitempty"`
	Salt       []byte `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
}

func (x *PedersenVerifyMessage) Reset() {
	*x = PedersenVerifyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_commitment_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PedersenVerifyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PedersenVerifyMessage) ProtoMessage() {}

func (x *PedersenVerifyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_commitment_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PedersenVerifyMessage.ProtoReflect.Descriptor instead.
func (*PedersenVerifyMessage) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_commitment_message_proto_rawDescGZIP(), []int{4}
}

func (x *PedersenVerifyMessage) GetEvaluation() []byte {
	if x != nil {
		return x.Evaluation
	}
	return nil
}

func (x *PedersenVerifyMessage) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

type PointSSIDInfoMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	U0G *ecpointgrouplaw.EcPointMessage `protobuf:"bytes,1,opt,name=u0G,proto3" json:"u0G,omitempty"`
	Sid []byte                          `protobuf:"bytes,2,opt,name=sid,proto3" json:"sid,omitempty"`
	Rid []byte                          `protobuf:"bytes,3,opt,name=rid,proto3" json:"rid,omitempty"`
	ID  []byte                          `protobuf:"bytes,4,opt,name=ID,proto3" json:"ID,omitempty"`
	A   *ecpointgrouplaw.EcPointMessage `protobuf:"bytes,5,opt,name=A,proto3" json:"A,omitempty"`
}

func (x *PointSSIDInfoMessage) Reset() {
	*x = PointSSIDInfoMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_commitment_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointSSIDInfoMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointSSIDInfoMessage) ProtoMessage() {}

func (x *PointSSIDInfoMessage) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_commitment_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointSSIDInfoMessage.ProtoReflect.Descriptor instead.
func (*PointSSIDInfoMessage) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_commitment_message_proto_rawDescGZIP(), []int{5}
}

func (x *PointSSIDInfoMessage) GetU0G() *ecpointgrouplaw.EcPointMessage {
	if x != nil {
		return x.U0G
	}
	return nil
}

func (x *PointSSIDInfoMessage) GetSid() []byte {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *PointSSIDInfoMessage) GetRid() []byte {
	if x != nil {
		return x.Rid
	}
	return nil
}

func (x *PointSSIDInfoMessage) GetID() []byte {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *PointSSIDInfoMessage) GetA() *ecpointgrouplaw.EcPointMessage {
	if x != nil {
		return x.A
	}
	return nil
}

var File_github_com_getamis_alice_crypto_commitment_message_proto protoreflect.FileDescriptor

var file_github_com_getamis_alice_crypto_commitment_message_proto_rawDesc = []byte{
	0x0a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74,
	0x61, 0x6d, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x67, 0x65, 0x74, 0x61,
	0x6d, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x3b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2f,
	0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x65, 0x63, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6c, 0x61, 0x77, 0x2f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2f, 0x0a, 0x15, 0x48, 0x61, 0x73, 0x68,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x17, 0x48, 0x61, 0x73,
	0x68, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x22, 0x66, 0x0a, 0x16,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73,
	0x2e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x65, 0x63,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6c, 0x61, 0x77, 0x2e, 0x45, 0x63,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x22, 0x36, 0x0a, 0x14, 0x46, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x6e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x15,
	0x50, 0x65, 0x64, 0x65, 0x72, 0x73, 0x65, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x14, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x53, 0x53, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x46, 0x0a, 0x03, 0x75, 0x30, 0x47, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x65, 0x63, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x6c, 0x61, 0x77, 0x2e, 0x45, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x75, 0x30, 0x47, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x49, 0x44, 0x12, 0x42,
	0x0a, 0x01, 0x41, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x65, 0x74, 0x61,
	0x6d, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x65, 0x63, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6c, 0x61, 0x77,
	0x2e, 0x45, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x01, 0x41, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_getamis_alice_crypto_commitment_message_proto_rawDescOnce sync.Once
	file_github_com_getamis_alice_crypto_commitment_message_proto_rawDescData = file_github_com_getamis_alice_crypto_commitment_message_proto_rawDesc
)

func file_github_com_getamis_alice_crypto_commitment_message_proto_rawDescGZIP() []byte {
	file_github_com_getamis_alice_crypto_commitment_message_proto_rawDescOnce.Do(func() {
		file_github_com_getamis_alice_crypto_commitment_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_getamis_alice_crypto_commitment_message_proto_rawDescData)
	})
	return file_github_com_getamis_alice_crypto_commitment_message_proto_rawDescData
}

var file_github_com_getamis_alice_crypto_commitment_message_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_github_com_getamis_alice_crypto_commitment_message_proto_goTypes = []interface{}{
	(*HashCommitmentMessage)(nil),          // 0: getamis.alice.crypto.commitment.HashCommitmentMessage
	(*HashDecommitmentMessage)(nil),        // 1: getamis.alice.crypto.commitment.HashDecommitmentMessage
	(*PointCommitmentMessage)(nil),         // 2: getamis.alice.crypto.commitment.PointCommitmentMessage
	(*FeldmanVerifyMessage)(nil),           // 3: getamis.alice.crypto.commitment.FeldmanVerifyMessage
	(*PedersenVerifyMessage)(nil),          // 4: getamis.alice.crypto.commitment.PedersenVerifyMessage
	(*PointSSIDInfoMessage)(nil),           // 5: getamis.alice.crypto.commitment.PointSSIDInfoMessage
	(*ecpointgrouplaw.EcPointMessage)(nil), // 6: getamis.alice.crypto.ecpointgrouplaw.EcPointMessage
}
var file_github_com_getamis_alice_crypto_commitment_message_proto_depIdxs = []int32{
	6, // 0: getamis.alice.crypto.commitment.PointCommitmentMessage.points:type_name -> getamis.alice.crypto.ecpointgrouplaw.EcPointMessage
	6, // 1: getamis.alice.crypto.commitment.PointSSIDInfoMessage.u0G:type_name -> getamis.alice.crypto.ecpointgrouplaw.EcPointMessage
	6, // 2: getamis.alice.crypto.commitment.PointSSIDInfoMessage.A:type_name -> getamis.alice.crypto.ecpointgrouplaw.EcPointMessage
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_github_com_getamis_alice_crypto_commitment_message_proto_init() }
func file_github_com_getamis_alice_crypto_commitment_message_proto_init() {
	if File_github_com_getamis_alice_crypto_commitment_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_getamis_alice_crypto_commitment_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashCommitmentMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_commitment_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashDecommitmentMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_commitment_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointCommitmentMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_commitment_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeldmanVerifyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_commitment_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PedersenVerifyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_commitment_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointSSIDInfoMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_getamis_alice_crypto_commitment_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_getamis_alice_crypto_commitment_message_proto_goTypes,
		DependencyIndexes: file_github_com_getamis_alice_crypto_commitment_message_proto_depIdxs,
		MessageInfos:      file_github_com_getamis_alice_crypto_commitment_message_proto_msgTypes,
	}.Build()
	File_github_com_getamis_alice_crypto_commitment_message_proto = out.File
	file_github_com_getamis_alice_crypto_commitment_message_proto_rawDesc = nil
	file_github_com_getamis_alice_crypto_commitment_message_proto_goTypes = nil
	file_github_com_getamis_alice_crypto_commitment_message_proto_depIdxs = nil
}
